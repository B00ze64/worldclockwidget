buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.1'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.10.1'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

apply from: rootProject.file('gradle/codequality.gradle')

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        versionCode 33
        versionName "1.6.1"

        minSdkVersion 10
        targetSdkVersion 19

        buildConfigField 'String', 'BUILD_TAG', '"' + getBuildTag() + '"'

        def buildSuffix = getBuildSuffix(versionName, versionCode)
        applicationVariants.all { variant ->
            def file = variant.outputFile
            variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + buildSuffix + ".apk"))
        }
    }

    if (project.hasProperty('signingKeyStoreFile')) {
        signingConfigs {
            release {
                storeFile     file(signingKeyStoreFile)
                storePassword signingKeyStorePassword
                keyAlias      signingKeyAlias
                keyPassword   signingKeyPassword
            }
        }
    }

    buildTypes {
        release {
            runProguard true
            proguardFile 'proguard-project.txt'
            if (project.hasProperty('signingKeyStoreFile')) {
                signingConfig signingConfigs.release
            }
        }
    }

    if (rootProject.hasProperty("lintAbortOnError") && lintAbortOnError == 'false') {
        lintOptions {
            abortOnError false
        }
    }
}

def getBuildSuffix(versionName, versionCode) {
    def suffix = versionName + '-' + versionCode
    if (System.getenv()['BUILD_NUMBER'] != null) {
        suffix += '-b' + System.getenv()['BUILD_NUMBER']
    }
    return suffix
}

def getBuildTag() {
    def tag = ''
    if (System.getenv()['BUILD_NUMBER'] != null) {
        tag += 'b' + System.getenv()['BUILD_NUMBER']
    } else {
        tag += 'l'
    }
    tag += '@' + new Date().format('yyyyMMdd')
    return tag
}

///////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies{
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.google.code.gson:gson:2.2.4'
}


///////////////////////////////////////////////////
// Checkstyle

task checkstyleDebug(type: Checkstyle, dependsOn: 'compileDebugJava') {
    source = fileTree('src/main/java/')
    classpath = files('build/intermediates/classes/debug')
}
check.dependsOn checkstyleDebug


///////////////////////////////////////////////////
// Findbugs

task findbugsDebug(type: FindBugs, dependsOn: 'compileDebugJava') {
    source = fileTree('src/main/java/')
    classes = fileTree('build/intermediates/classes/debug')
    classpath = files() // empty classpath!
    effort = 'max'
    excludeFilter = rootProject.file('config/findbugs/androidExcludeFilter.xml')
}
check.dependsOn findbugsDebug

///////////////////////////////////////////////////
// PMD

task pmd(type: Pmd) {
    source = fileTree('src/main/java/')
    ruleSets = ['java-basic', 'java-braces', 'java-android']
}
check.dependsOn 'pmd'
